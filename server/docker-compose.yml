services:
  node:
    build:
      context: ../
      args:
        TROVE_AWS_ACCESS_KEY_ID: ${TROVE_AWS_ACCESS_KEY_ID}
        TROVE_AWS_SECRET_ACCESS_KEY: ${SECRET_TROVE_AWS_SECRET_ACCESS_KEY}
    ports:
      - 13031:13031
    env_file: .env
    profiles: ["server"]
    networks:
      - standard
    labels: &labels
      com.aops.application: fastack-starter

  node_worker:
    build:
      context: ../
      target: devworker
      args:
        TROVE_AWS_ACCESS_KEY_ID: ${TROVE_AWS_ACCESS_KEY_ID}
        TROVE_AWS_SECRET_ACCESS_KEY: ${SECRET_TROVE_AWS_SECRET_ACCESS_KEY}
    env_file: .env
    profiles: ["server"]
    networks:
      - standard
    labels: *labels

  node_ci:
    build:
      context: ../
      args:
        TROVE_AWS_ACCESS_KEY_ID: ${TROVE_AWS_ACCESS_KEY_ID}
        TROVE_AWS_SECRET_ACCESS_KEY: ${SECRET_TROVE_AWS_SECRET_ACCESS_KEY}
      target: ci
    depends_on:
      - redis
      - postgres_test
    env_file: .env
    profiles: ["ci"]
    networks:
      - standard
    labels: *labels

  redis:
    image: redis:7
    env_file: .env
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      - redis-server --requirepass "$${REDIS_PASSWORD}"
    ports:
      - 13540:6379
    volumes:
      - redis_data:/data
    labels: *labels
    networks:
      - standard

  postgres:
    image: postgres:15
    ports:
      - 13541:5432
    environment:
      PGDATA: /pgdata
      POSTGRES_DB: fastackstarter
      POSTGRES_USER: website
      POSTGRES_PASSWORD: ${SECRET_DATABASE_PASSWORD}
    volumes:
      - pg_data:/pgdata
    labels: *labels
    networks:
      - standard

  postgres_test:
    build:
      context: ..
      dockerfile: ./Dockerfile_db_test
    ports:
      - 13542:5432
    environment:
      PGDATA: /pgdata
      POSTGRES_DB: fastackstarter_test
      POSTGRES_USER: website_test
      POSTGRES_PASSWORD: fakepasswordfortests
    labels: *labels
    networks:
      - standard
    # No volume; want to reset every run

networks:
  standard:
volumes:
  redis_data:
    labels: *labels
  pg_data:
    labels: *labels
